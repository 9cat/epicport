<div class="container_12">
  <div class="grid_10">
    <h1><%=t("html_static_page_title_dune2-story")%></h1>


<b>Разработчик: </b>Westwood Studios<br/>
<b>Издатель: </b>Virgin Games<br/>
<b>Жанр: </b>Strategy (Real-time) / Top-down<br/>
<b>Системные требования: </b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://habr.habrastorage.org/post_images/0d2/390/5dc/0d23905dc962524094f870678d2691c5.png" alt="moder browsers"/><br/>
<br/>
<h4>Вместо введения</h4><br/>
<a href="/ru/dune2/description">Dune 2</a> — это великолепная стратегия, одна из первых в жанре. Нет смысла распинаться и говорить насколько это великая игра для целого поколения детей 90х. А так как я, неожиданно для себя нахожу в удовольствие возиться с кодом и портировать его в JavaScript, то конечно же моей целью после TTD неизбежно стала Dune 2. По счастливой случайности я не додумался начать с неё, поскольку боюсь я бы не справился. Как оказалось, хоть Dune 2 и проще по функционалу чем TTD, но портировать ее было сложнее, но об этом далее.<br/>
<br/>
<h4>Кодовая база</h4><br/>
Выбор «правильной» кодовой базы является главным фактором успешного портирования проекта с применением <a href="http://emscripten.org">emscripten</a>. Например, использование <a href="http://www.libsdl.org/">SDL</a>, отсутствие многопоточности являются хорошим маркером того что портирование пройдет с успехом. Я перебрал похоже все проекты так или иначе связанные с Dune 2, и остановился на <a href="http://www.opendune.org/">OpenDune</a>. Фишка которая меня зацепила — полное копирование всего поведения оригинальной игры включая все её баги. Похоже, код этого проекта изначально был получен полуавтоматическим путем из оригинала. В коде тут и там встречаются переменные с именем <i>local_03FF</i>, очень много глобальных переменных, код читать очень тяжело. Самый серьезный недостаток исходной кодовой базы в многопоточности, она вызвала много проблем при портировании. Но зато результат действительно радует, в браузере игра похожа на оригинал очень сильно, за исключением новой пачки багов.<br/>
<br/>
<h6>Итак, сухие факты:</h6><br/>
Язык: C<br/>
Количество исходных файлов: 143<br/>
Количество строк кода: 59151<br/>
Размер бинарника: 423.2 Кб<br/>
Размер эквивалентного JavaScript: ~1000 Кб<br/>
Время потраченное на портирование: ~ 2 месяца<br/>
<br/>
Далее в этой статье будут описаны сложности с которыми я столкнулся при портировании. Наверняка это интересно не каждому, если так, то опустите этот подраздел до «известных проблем».<br/>
<br/>
<h4>Многопоточность VS асинхронность</h4><br/>
OpenDune имеет достаточно интересную модель многопоточности основывающуюся на прерываниях. Для обеспечения многопоточности, игровой код в момент простоя крутится в бесконечных циклах, выглядит это примерно так:<br/>
<br/>
<pre><code> while (true) {
        uint16 key;
        key = GUI_Widget_HandleEvents(w);

        if (key = 13) {
            break;
        }

        sleepIdle();
    }
</code></pre><br/>
<br/>
При старте приложения инициализируется интервальный таймер функцией <a href="http://www.intuit.ru/department/se/pposix/12/7.html">setitimer</a>. Этот таймер вызывает прерывание через равные промежутки времени. Оно приостанавливает основной поток выполнения и позволяет выполнить произвольный код. Для JavaScript реализация аналогичного таймера тривиальна, тем не менее был выбран другой путь портирования дабы искусственно не делить проект на JavaScript и C реализации. Было решено полностью отказаться от использования функции <i>setitimer</i>, вместо этого вызов <i>sleepIdle()</i> был замещен функцией обработки событий по таймеру, т.е. вместо простоя эта функция определяет какие запланированные события подошли и запускает их на выполнение. <br/>
<br/>
Более серьезная проблема — внутрение циклы <i>while</i>, любое появление такого цикла в JavaScript вызовет неминуемое зависание открытой вкладки браузера (или браузера в целом). Это связано с тем, что большинство циклов ожидают пользовательского ввода (нажатие кнопки мыши, клавиатуры), однако браузер не может обработать события от устройств ввода, они ставятся в цепочку исполнения уже после текущего исполняемого блока JavaScript. Возможный способ решения этой проблемы — ручная правка кода и перевод проблемного кода в асинхронный режим. <br/>
<br/>
Небольшой примеричик. Вот черновик кода который вызывает проблемы:<br/>
<br/>
<pre><code>void someProblemFunction() {
    {
        //open 1
    }

    while (true) {
        // open 2

        while (true) {
            // code 2
        }

        // close 2
    }

    {
        //close 2
    }
}
</code></pre><br/>
<br/>
После мучительных умозрительных манипуляций, асинхронный код:<br/>
<br/>
<pre><code>void asyncSomeProblemFunction() {
    Async_InvokeInLoop(
        asyncSomeProblemFunctionOpen1,
        asyncSomeProblemFunctionCondition1,
        asyncSomeProblemFunctionLoop1,
        asyncSomeProblemFunctionClose1);
}

void asyncSomeProblemFunctionOpen1() {
    // code from open 1
}

void asyncSomeProblemFunctionCondition1() {
    // code from loop 1 condition
}

void asyncSomeProblemFunctionLoop1() {
    Async_InvokeInLoop(
        asyncSomeProblemFunctionOpen2,
        asyncSomeProblemFunctionCondition2,
        asyncSomeProblemFunctionLoop2,
        asyncSomeProblemFunctionClose2);
}

void asyncSomeProblemFunctionClose1() {
    // code from close 1
}
</code></pre><br/>
<br/>
Адская работа. Ядром всей системы является функция <i>Async_InvokeInLoop</i>.<br/>
<br/>
<pre><code>void Async_InvokeInLoop(
    void (*open)(), 
    void (*condition)(bool* ref), 
    void (*loop)(), 
    void (*close)());
</code></pre><br/>
<br/>
<i>Async_InvokeInLoop</i> — позволяет заменить любой цикл <i>while (true)</i> асинхронным эквивалентом. Функция гарантирует вызов <i>open</i> до начала цикла, а <i>close</i> после завершения цикла. Ссылки на функции <i>condition</i> и <i>loop</i> являются равноправными участниками асинхронной итерации, что они делают ясно из названия. Итерация реализуется через функцию <i>Async_Loop</i>:<br/>
<br/>
<pre><code>void Async_Loop() {
    ScheduledAsync *top = STACK_TOP;

    switch (top-&gt;state) {
        case ScheduledAsync_OPEN: {
            top-&gt;open();
            top-&gt;state = ScheduledAsync_CONDITION;

            return;
        }

        case ScheduledAsync_CONDITION: {
            top-&gt;condition(&top-&gt;conditionValue);
            top-&gt;state = ScheduledAsync_LOOP;

            return;
        }

        case ScheduledAsync_LOOP: {
            if (top-&gt;conditionValue) {
                top-&gt;loop();
                top-&gt;state = ScheduledAsync_CONDITION;
            } else {
                top-&gt;state = ScheduledAsync_CLOSE;
            }

            return;
        }

        case ScheduledAsync_CLOSE: {
            popStack();
            top-&gt;close();

            free(top);
            return;
        }

        default:
            abort();
    }
}
</code></pre><br/>
<br/>
Игровой цикл (или таймер в JavaScript) переодически дергает эту функцию заставляя всё в игре крутится. Если исходная функция должна возвращать результат, то проблемы удваиваются — приходится сохранять результат в памяти глобально, и потом извлекать его в других функциях. Все работает по соглашению. В результате у меня получился адовый фреймворк для асинхронизации проекта, вот его интерфейс:<br/>
<br/>
<pre><code>/*
 * async.h
 *
 *  Created on: 19.10.2012
 *      Author: caiiiycuk
 */

#ifndef ASYNC_H_
#define ASYNC_H_

#include &quot;types.h&quot;

extern void async_noop();
extern void async_false(bool *condition);
extern void async_true(bool *condition);

extern void Async_InvokeInLoop(void (*open)(), void (*condition)(bool* ref), void (*loop)(), void (*close)());
extern bool Async_IsPending();
extern void Async_Loop();

extern void Async_InvokeAfterAsync(void (*callback)());
extern void Async_InvokeAfterAsyncOrNow(void (*callback)());

extern void Async_Storage_uint16(uint16* storage);
extern void Async_StorageSet_uint16(uint16 value);


\#endif /* ASYNC_H_ */
</code></pre><br/>
<br/>
Синхронная природа игры мутировала в асинхронную, что порадило несколько забавных багов:<br/>
<ul>
<li>Если вызвать меню строительства непосредственно перед тем, как компьютерный противник определит следующее строение для постройки, то можно получить доступ к его сооружениям (исправлено)</li>
<li>При загрузке сценария существовала возможность что сооружения противника получат 20 000 — 30 000 едениц жизни вместо 150 — 200 (исправлено)</li>
<li>Из за ошибок синхронизации — игровая карта может перерисоваться прямо поверх диалога с ментатом, правда проявляется это редко (не исправлено)</li>
</ul><br/>
<br/>
<h4>Известные проблемы</h4><br/>
Из за того, что штат тестеров состоит из меня и моих вымышленных друзей, известно только что:<br/>
<ul>
<li>Игра работает в браузерах Firefox, Chrome, Opera, Chrome (Android ~4)</li>
<li>Игра полностью пройденна за дом Харконненов и серьезных проблем не найденно</li>
<li>Небольшое количество миссий пройдено за два других дома, проблем так же не было</li>
<li>Игровой курсор никогда не меняется (вне зависимости от выбранного действия), сделанно намеренно (он подтормаживает)</li>
<li>Для прокрутки карты используйте миникарту или стрелочки клавиатуры (больше используйте клавиатуру в игре)</li>
<li>Есть музыка, но эффектов нет</li>
<li>На игровой карте могут появлятся артефакты (очень редко, вы сразу поймете), в этом случае помогает открытие/закрытие игрового меню</li>
<li>В меню работают пункты: сохранить, загрузить, рестарт миссии</li>
<li>В игре только один слот для сохранения (на все дома)</li>
</ul><br/>
Всё остальное работает, либо должно работать.<br/>
  </div>
</div>